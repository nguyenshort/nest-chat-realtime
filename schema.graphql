"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input CreateLicenseInput {
  """Mã định danh app"""
  appID: String!
}

input CreateRoomInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  licenseCreate(input: CreateLicenseInput!): Token!
  createRoom(createRoomInput: CreateRoomInput!): Room!
  updateRoom(updateRoomInput: UpdateRoomInput!): Room!
  removeRoom(id: Int!): Room!
}

type Query {
  room(id: Int!): Room!
}

type Room {
  id: ID!
  name: String!
  avatar: String
  users: [User!]!
  createdAt: Float!
}

type Token {
  token: String!
}

input UpdateRoomInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type User {
  id: ID!
  name: String!

  """User ID thật"""
  userID: String!
  appID: String!
  meta: JSON!
  avatar: String
  createdAt: Float!
}
