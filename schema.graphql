"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input CreateConnectInput {
  """Thông tin của thành viên"""
  user: CreateUserInput!
}

input CreateLicenseInput {
  """Mã định danh app"""
  appID: String!
}

input CreateRoomInput {
  """Tên nhóm"""
  name: String!

  """Ảnh đại diện"""
  avatar: String

  """Mảng userID"""
  users: [String!]!
}

input CreateUserInput {
  """tên người dùng"""
  name: String!

  """ảnh đại diện người dùng"""
  avatar: String!

  """id người dùng thật"""
  userID: String!
}

type Mutation {
  licenseCreate(input: CreateLicenseInput!): Token!
  userCreate(input: CreateUserInput!): User!
  userUpdate(
    input: UpdateUserInput!

    """User ID"""
    userID: String!
  ): User!
  userRemove(userID: String!): User!
  roomCreate(input: CreateRoomInput!): Room!
}

type Query {
  hello: String!
}

type ReadAt {
  user: User!
  time: Float!
}

type Room {
  id: ID!
  name: String!
  avatar: String
  users: [User!]!
  createdAt: Float!
}

type Subscription {
  connect(input: CreateConnectInput!): User!
}

type Token {
  token: String!
}

input UpdateUserInput {
  """tên người dùng"""
  name: String

  """ảnh đại diện người dùng"""
  avatar: String
}

type User {
  id: ID!
  name: String!

  """User ID thật"""
  userID: String!
  avatar: String
  createdAt: Float!
}
