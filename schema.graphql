"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input AddToRoomInput {
  roomID: String!

  """Mảng User Data"""
  users: [CreateUserInput!]!
}

input CreateConnectInput {
  """Thông tin của thành viên"""
  user: CreateUserInput!
}

input CreateFileInput {
  """User ID người gửi"""
  from: String!

  """link file"""
  file: String
}

input CreateImageInput {
  """User ID người gửi"""
  from: String!

  """Hình ảnh tin nhắn"""
  images: [String!]!
}

input CreateLicenseInput {
  """Mã định danh app"""
  appID: String!
}

input CreateMessageInput {
  """User ID người gửi"""
  from: String!

  """Nội dung tin nhắn"""
  content: String
}

input CreateNoteInput {
  """User ID người gửi"""
  from: String!

  """Nọi dung gi chú"""
  note: String!
}

input CreateRoomInput {
  """Tên nhóm"""
  name: String

  """Ảnh đại diện"""
  avatar: String

  """Mảng userID"""
  users: [String!]!
}

input CreateUserInput {
  """tên người dùng"""
  name: String!

  """ảnh đại diện người dùng"""
  avatar: String!

  """id người dùng thật"""
  userID: String!
}

type File {
  id: ID!
  from: User!
  room: Room!
  license: License!
  readAt: [ReadAt!]!
  createdAt: Float!
  file: String!
}

input GetInboxsInput {
  """Room ID"""
  roomID: String!

  """Giới hạn"""
  limit: Int!

  """Skip"""
  offset: Int!
}

input GetMessagesInput {
  """Room ID"""
  roomID: String!

  """Giới hạn"""
  limit: Int!

  """Skip"""
  offset: Int!
}

input GetRoomsInput {
  userID: String!

  """Giới hạn"""
  limit: Int!

  """Skip"""
  offset: Int!
}

type Image {
  id: ID!
  from: User!
  room: Room!
  license: License!
  readAt: [ReadAt!]!
  createdAt: Float!
  images: [String!]!
}

type Inbox {
  """Example field (placeholder)"""
  exampleField: Int!
}

input KickRoomInput {
  roomID: String!
  userIDs: [String!]!
}

type License {
  id: ID!

  """Mã định danh app"""
  appID: String!

  """Ngày tạo license"""
  createdAt: Float!
}

type Message {
  id: ID!
  from: User!
  room: Room!
  license: License!
  readAt: [ReadAt!]!
  createdAt: Float!
  content: String!
}

type Mutation {
  licenseCreate(input: CreateLicenseInput!): Token!
  userCreate(input: CreateUserInput!): User!
  upsertUsers(input: UpsertUsersInput!): [User!]!
  userUpdate(
    input: UpdateUserInput!

    """User ID"""
    userID: String!
  ): User!
  userRemove(userID: String!): User!
  messageSend(input: CreateMessageInput!, roomId: String!): Message!
  messageRead(input: ReadMessageInput!): [Message!]!

  """Sẽ xoá trong các version sau"""
  roomCreate(input: CreateRoomInput!): Room!
  roomUpsert(input: UpserRoomInput!): Room!
  roomKick(input: KickRoomInput!): Room!
  roomAdd(input: AddToRoomInput!): Room!
  roomUpdateInfo(input: UpdateRoomInfoInput!): Room!
  fileCreate(input: CreateFileInput!, roomId: String!): File!
  imageMessageSend(input: CreateImageInput!, roomId: String!): Image!
  noteCreate(input: CreateNoteInput!, roomId: String!): Note!
}

type Note {
  id: ID!
  from: User!
  room: Room!
  license: License!
  readAt: [ReadAt!]!
  createdAt: Float!
  note: String!
}

type Query {
  version: String!
  userOnline(userID: String!): UserOnline!
  messagesByRoom(filter: GetMessagesInput!): [Message!]!
  roomGet(roomID: String!, userID: String!): Room!
  getRooms(input: GetRoomsInput!): [Room!]!
  getRoomCalling(roomID: String!): [String!]!
  inboxsGet(filter: GetInboxsInput!): [ResultUnion!]!
}

type ReadAt {
  user: User!
  time: Float!
}

input ReadMessageInput {
  """Điểm neo"""
  anchor: String!
  room: String!

  """ID người đọc"""
  userID: String!
}

union ResultUnion = Message | Image | File

type Room {
  id: ID!
  name: String!
  avatar: String
  users: [User!]!
  createdAt: Float!
  updatedAt: Float
}

type RoomOnlines {
  room: Room!
  onlines: [String!]!
}

type Subscription {
  connect(input: CreateConnectInput!): User!
  subUserOnline(userID: String!): UserOnline!
  roomSub(roomID: String!, userID: String!): Room!
  roomOnlines(roomID: String!, userID: String!): RoomOnlines!
  subWaitingCall(userID: String!): Room!
  subMyRooms(userID: String!): Room!
  subCallingRooms(roomID: String!): [String!]!
  subCalling(roomID: String!, userID: String!): [String!]!
  subNewInbox(userID: String!): Inbox!
  subNewInboxByRoom(userID: String!, roomID: String!): ResultUnion!
}

type Token {
  token: String!
}

input UpdateRoomInfoInput {
  userID: String!
  roomID: String!
  name: String!
  avatar: String!
}

input UpdateUserInput {
  """tên người dùng"""
  name: String

  """ảnh đại diện người dùng"""
  avatar: String
}

input UpserRoomInput {
  """Mảng User Data"""
  users: [CreateUserInput!]!
}

input UpsertUsersInput {
  users: [CreateUserInput!]!
}

type User {
  id: ID!
  name: String!

  """User ID thật"""
  userID: String!
  avatar: String
  createdAt: Float!
}

type UserOnline {
  user: User!
  isOnline: Boolean!
}
